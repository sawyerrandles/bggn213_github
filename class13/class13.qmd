---
title: "class13: RNAseq with DESeq2"
author: "Sawyer Randles PID: A69034741"
format: pdf
editor: visual
---

Today we will work with some bulk RNASeq data from Himes et al. where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

Let's have a wee peak:

```{r}
head(counts)
```

```{r}
head(metadata)
```

> Q1. How many transcripts/genes are in the `counts` object?

There are `r nrow(counts)` genes in this dataset.

```{r}
nrow(counts)
```

> Q2. How man "control" samples are there?

```{r}
table(metadata$dex)
```

I want to compare "control" vs "treated"

1.  Let's split the "counts" into `control.counts` and `treated.counts`

```{r}
metadata$id == colnames(counts)
```

```{r}
control.inds <- metadata$dex == "control"
treated.inds <- metadata$dex == "treated"
```

```{r}
control.counts <- counts[ , control.inds]
```

```{r}
treated.counts <- counts[ , treated.inds]
```

2.  Let's calculate the mean counts per gene for "control" and "treated" - then we can compare these :-). Let's call it `control.mean` and `treated.mean`.

I can use the `apply()` function to apply `mean()` over the rows or columns of any data.frame.

```{r}
control.mean <- apply(control.counts, 1, mean)
treated.mean <- apply(treated.counts, 1, mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
plot(meancounts, log='xy')
```

We most often use log2 transforms here because it makes the math easier for Barry's little brain.

Let's calculate the log2 fold change and add it to our wee table `meancounts`.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```

Filter out all genes with zero counts in either control or treated:

```{r}
#indices of genes that i don't want to use/want to remove
to.rm <- rowSums(meancounts[,1:2] == 0) > 0
mycounts <- meancounts[!to.rm,]
nrow(mycounts)
```

> Q. How many "down" regulated genes do we have at the common log2 fold change value of -2...

```{r}
sum(mycounts$log2fc < -2)
```

> Q. How many "up" at log2FC \> +2?

```{r}
sum(mycounts$log2fc > 2)
```

Do we trust these results? Is there anything missing?

```{r}
# pipe operator will change behavior of code chunk and not report output from library() so it doesn't gunk up the document
#| message: false
library(DESeq2)
```

DESeq, like many BioConductor packages, wants our input data in a very specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

The main function in DESeq is called `DESeq()`.

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```

A common overview figure plots the logFC vs P-value

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(2, -2), col='gray')
abline(h=-log(0.005), col='gray')
```

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange > 2] <- "red"
mycols[res$log2FoldChange < -2] <- "red"
mycols[res$padj > 0.005] <- "grey"


plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=c(2, -2), col='gray')
abline(h=-log(0.005), col='gray')
```


```{r}
write.csv(res, file="myresults.csv")
```

## Gene Annotation

```{r}
head(res)
```

```{r}
#BiocManager::install("AnnotationDbi")
#BiocManager::install("org.Hs.eg.db")

library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")


```

```{r}
head(res)
```

## Pathway Analysis

```{r}
# Run in your R console (i.e. not your Rmarkdown doc!)
#BiocManager::install( c("pathview", "gage", "gageData") )
```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

need to speak ENTREZID so I can check KEGG pathway overlap as KEGG uses ENTREZ format IDs.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
```

I can now use the **gage** function to check for overlap with known KEGG pathways.

```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r}
attributes(keggres)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![A pathway figure](hsa05310.pathview.png)
