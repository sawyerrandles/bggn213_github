---
title: "Class 14: RNASeq Mini Project"
author: "Sawyer Randles PID: A69034741"
format: pdf
editor: visual
---

## Import Data

We need two things "Counts" and "MetaData" (what DESeq calls colData - as it describes the columns in Counts).

```{r}
counts <- read.csv('GSE37704_featurecounts.csv', row.names = 1)
metadata <- read.csv('GSE37704_metadata.csv')

```

## Data CleanUp

Start with a wee peak:

```{r}
head(counts)
```

```{r}
head(metadata)
```

We want the columns in the `counts` to match the rows in the `metadata`.

```{r}
colnames(counts)
```

```{r}
metadata$id
```

We can get rid of the first column in `counts` to make these match

```{r}
countData <- counts[,-1]
head(countData)
```

```{r}
all(colnames(countData) == metadata$id)
```

## Filter out zero counts

It is standard practice to remove any genes/transcripts that we have no data for - i.e. zero counts in all columns.

```{r}
to.keep.inds <- rowSums(countData) > 0
cleanCounts <- countData [to.keep.inds,]
head(cleanCounts)
```

## Setup for DESeup

```{r}
#| message: false

library(DESeq2)
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = cleanCounts,
                       colData = metadata,
                       design = ~condition)
```

## DESeq

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

## Inspect Results

```{r}
head(res)
```

## Data Viz

```{r}
plot(x = res$log2FoldChange, y = -log(res$padj))
```

## Annotation of genes

First I need to translate my Ensemble IDs in my `res` object to Entrez and gene symbol formats.

For this I will use the AnnotationDbi package and it's `mapIds()` function.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

```{r}
columns(org.Hs.eg.db)
```

Let's map to "SYMBOL", "ENTREZID" "GENENAME" from "ENSEMBL" ids.

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL",
                      column = "GENENAME")

res$symbol <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL",
                      column = "SYMBOL")

res$entrez <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL",
                      column = "ENTREZID")
head(res)
```

Before going any further lets focus in on a subset of "top" hits.

We can use as a starting point log2FC of +2/-2 and an adjusted P-value of 0.05.

```{r}
# when there is no chance of passing, the program does not even test p-vlaues that are already too large
# you can go ahead and make these false in your selection criteria so they are excluded
top.inds <- (abs(res$log2FoldChange) > 2) & (abs(res$padj) > 0.05)
top.inds[is.na(top.inds)] <- FALSE
```

Let's save our "top genes" to a CSV file...

```{r}
top.genes <- res[top.inds,]
write.csv(top.genes, file="top.geneset.csv")
```

## Pathway Analysis

Now we can do some pathway analysis

```{r}
library(gage)
library(gageData)
library(pathview)

data(kegg.sets.hs)
#data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
#kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
#head(kegg.sets.hs, 3)
```

The **gage** function wants a vector of importance as input withh gene names as labels - KEGG speaks ENTREZ

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Run gage with these values

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

```{r}
pathview(foldchanges, pathway.id = "hsa04110")
```

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

```{r}
head(gobpres$less)
```

To run reactome online we need to make a little text file with a gene id per line.

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
#sig_genes
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

![](PathwaysOverview.png)

```{r}
#all() checks to see if all conditions are true
x <- all(c(T,T,F,T))

{if (all(x)) {
  cat("me happy")
} else {}
  cat("me no happy")
  }
```

```{r}
c(T,T,F,T) & c(F,T,T,T)
```
